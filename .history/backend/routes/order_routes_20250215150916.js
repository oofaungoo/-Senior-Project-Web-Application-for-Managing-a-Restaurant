const express = require('express');
const router = express.Router();

const dataDB = require('../models/orders');

// üìå Get all orders
router.get('/', async (req, res) => {
    try {
        const result = await dataDB.find();
        res.json(result);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// üìå Get an order by ID
router.get('/:id', async (req, res) => {
    try {
        const data = await dataDB.findById(req.params.id);                          //‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ data (order) ‡πÉ‡∏ô dataDB
        if (!data) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Order ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        res.json(data);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// üìå Create a new order
router.post('/', async (req, res) => {
    try {
        const todayDate = new Date().toLocaleDateString('en-GB');   //‡∏Å‡∏≥‡∏´‡∏ô‡∏î todayDate ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡∏°‡∏µ format: DD/MM/YYYY

        //‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ latestOrder ‡∏ó‡∏µ‡πà‡∏°‡∏µ orderDate ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö todayDate
        //‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏≤ order ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏° lastestOrder ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç if ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 37 ‡πÑ‡∏õ)
        const latestOrder = await dataDB.findOne({ orderDate: todayDate }).sort({ orderNumber: -1 });   

        let newOrderNumber = 1; //‡∏Å‡∏≥‡∏´‡∏ô‡∏î newOrderNumber ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1 
        if (latestOrder) {      //‡∏ñ‡πâ‡∏≤‡∏°‡∏µ latestOrder ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ order ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πá‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç orderNumber ‡∏Ç‡∏≠‡∏á order ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤ +1
            newOrderNumber = latestOrder.orderNumber + 1;
        }

        const order = new dataDB({
            orderNumber: newOrderNumber,
            orderDate: todayDate,
            orderTime: new Intl.DateTimeFormat('en-GB', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,  // Ensures 24-hour format
            }).format(new Date()).replace(":", "."),  // Replace ":" with "."
            orderItems: req.body.items,
            orderType: req.body.orderType,
            contactInfo: req.body.contactInfo,
            orderStatus: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°',
            totalPrice: req.body.total
        });

        const newOrder = await order.save();
        res.status(201).json(newOrder);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});


// üìå Update an order by ID
router.put('/:id', async (req, res) => {
    try {
        const updatedOrder = await dataDB.findByIdAndUpdate(
            req.params.id,
            { $set: req.body }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            { new: true, runValidators: true } // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        );

        if (!updatedOrder) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Order ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });

        res.json(updatedOrder);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// üìå Delete an order by ID
router.delete('/:id', async (req, res) => {
    try {
        const order = await dataDB.findByIdAndDelete(req.params.id);
        if (!order) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Order ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö' });

        res.json({ message: '‡∏•‡∏ö Order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

module.exports = router;
