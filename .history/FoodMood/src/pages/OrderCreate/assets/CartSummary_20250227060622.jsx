import React, { useState, useEffect } from 'react';
import { FaRegTrashAlt } from "react-icons/fa";
import { Grid } from '@mui/system';

const CartSummary = ({ cartItems, totalPrice, handleEditItem, handleRemoveItem, onSave }) => {
    const [paidOption, setPaidOption] = useState('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    const [phoneNumber, setPhoneNumber] = useState('');
    const [tableNumber, setTableNumber] = useState('');
    const [orderNumber, setOrderNumber] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    useEffect(() => {
        const fetchLatestOrderNumber = async () => {
            try {
                const todayDate = new Date().toLocaleDateString('en-GB'); // DD/MM/YYYY
                const response = await fetch('http://localhost:5000/api/orders'); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                const orders = await response.json();

                // ‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
                const todayOrders = orders.filter(order => order.orderDate === todayDate);
                const latestOrder = todayOrders.sort((a, b) => b.orderNumber - a.orderNumber)[0];

                setOrderNumber(latestOrder ? latestOrder.orderNumber + 1 : 1);
            } catch (error) {
                console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ fecth ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database‡πÑ‡∏î‡πâ:', error);
            }
        };

        fetchLatestOrderNumber();
    }, []);

    const handlePaidOptionChange = (e) => {
        setPaidOption(e.target.value);
        setPhoneNumber('');
        setTableNumber('');
    };

    const isDineIn = paidOption === '‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô';

    const handleSave = () => {
        const newOrder = {
            orderNumber,
            employeeName: "Tester404",
            items: cartItems,
            total: totalPrice,
            orderType: paidOption,
            contactInfo: isDineIn ? { tableNumber } : { phoneNumber },
            orderDate: new Date().toLocaleDateString('en-GB'),
            orderTime: new Date().toLocaleTimeString(),
        };


        onSave(newOrder);
    };

    return (
        <>
            <Grid container sx={{ borderBottom: "2px solid #ddd", marginBottom: "8px", paddingBottom: "8px", justifyContent: "center", display: "flex" }}>
                <p style={{ fontSize: 26, fontWeight: 500 }}>{orderNumber !== null ? `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà ${orderNumber}` : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...'}</p>

            </Grid>

            <p style={{ marginTop: "10px", fontSize: 18, fontWeight: 500 }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á</p>
            <div className='fs-18 fw-5' ></div>
            <ul>
                {cartItems.map((item, index) => (
                    <li className='cart-item-column' style={{ marginTop: "5px" }} key={index}>
                        <div className="cart-item-details">
                            <span className="quantity-box">{item.quantity}</span>
                            <div className="item-info">
                                <div className="item-name">{item.name}</div>
                                <div className="item-size-note fs-14">
                                    {item.size}
                                    {item.selectedOptions && Object.keys(item.selectedOptions).length > 0 && (
                                        <div className="selected-options">
                                            <ul>
                                                {Object.entries(item.selectedOptions).map(([label, option]) => (
                                                    <li key={label}>{label}: {option}</li>
                                                ))}
                                            </ul>
                                        </div>
                                    )}
                                    {item.note && <div className='text-dark-grey'>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item.note}</div>}
                                </div>
                            </div>
                            <span className="cart-item-price">{item.price * item.quantity}</span>
                        </div>
                        <div className='order-edit-del'>
                            <button onClick={() => handleEditItem(index)} className='text-blue invisible-btn fs-14 fw-5' style={{ marginLeft: "28px" }}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                            <button onClick={() => handleRemoveItem(index)} className='text-red invisible-btn fs-14 fw-5'><FaRegTrashAlt /></button>
                        </div>
                    </li>
                ))}
            </ul>

            <Grid sx={{ borderBottom: "1px solid #ddd", marginBottom: "8px", }}>
                <div className="total-price fs-18 fw-5">
                    <span>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</span>
                    <span className='right'>{totalPrice}</span>
                </div>
            </Grid>
                <Grid marginTop="auto">
                    
                </Grid>
            <Grid>
                <label>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£: </label>
                <select value={paidOption} onChange={handlePaidOptionChange}>
                    <option value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
                    <option value="‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô">üçΩÔ∏è ‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô</option>
                    <option value="‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô">üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</option>
                    <option value="Delivery">üöö Delivery</option>
                    <option value="‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢">üéâ ‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢</option>
                </select>
                {paidOption !== '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' && (
                    <div style={{ marginTop: "10px" }}>
                        <label>{isDineIn ? "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞: " : "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: "}</label>
                        <input
                            type="text"
                            value={isDineIn ? tableNumber : phoneNumber}
                            onChange={(e) => isDineIn ? setTableNumber(e.target.value) : setPhoneNumber(e.target.value)}
                            placeholder={isDineIn ? "‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞" : "‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"}
                        />
                    </div>
                )}
            </Grid>
            
            <Grid display="flex" justifyContent="space-between" borderTop="1px solid #ddd" sx={{ paddingTop: "8px", justifyContent: "center", display: "flex" }}>
                <button className="blue-button" onClick={handleSave}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á</button>
            </Grid>
        </>
    );
};

export default CartSummary;
