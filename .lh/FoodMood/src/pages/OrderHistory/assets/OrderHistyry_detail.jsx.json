{
    "sourceFile": "FoodMood/src/pages/OrderHistory/assets/OrderHistyry_detail.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739695403047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740642239905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,153 @@\n-// สำหรับหน้านี้จะเหมือนกับหน้า \"ออเดอร์ปัจจุบัน\" แต่รอแต่ง CSS ให้เรียบร้อยค่อยดึงมาก็ๆได้ แค่ Fetch data เข้ามาโชว์เฉย ๆ \r\n-// No Function need, just read data\r\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import './OrderDetail.css';\r\n+import { Grid, Box, Typography } from \"@mui/material\";\r\n+import Swal from 'sweetalert2';\r\n+import CloseIcon from '@mui/icons-material/Close';\r\n+import { motion, AnimatePresence } from \"framer-motion\";\r\n \r\n+const OrderHistory_detail = ({ selectedOrder, onClose, updateOrder }) => {\r\n+    const [categoryList, setCategoryList] = useState([]);\r\n+    const [filterCategory, setFilterCategory] = useState(\"\");\r\n+\r\n+    // API: Fetch data from database (1.Food category 2.Food size 3.Ingredient)\r\n+    useEffect(() => {\r\n+        // Food category\r\n+        axios.get('http://localhost:5000/api/add_menus/category')\r\n+            .then(res => { setCategoryList(res.data); })\r\n+            .catch(err => console.error('Error fetching categories:', err));\r\n+    }, []);\r\n+\r\n+\r\n+    const filteredItems = filterCategory\r\n+        ? selectedOrder?.orderItems?.filter(item => item.category === filterCategory)\r\n+        : selectedOrder?.orderItems || [];\r\n+\r\n+    if (!selectedOrder) {\r\n+        return <p>ไม่มีข้อมูลออเดอร์</p>;\r\n+    }\r\n+\r\n+    const statusMap = {\r\n+        \"ยังไม่เริ่ม\": \"กำลังทำ\",\r\n+        \"กำลังทำ\": \"พร้อมเสิร์ฟ\",\r\n+        \"พร้อมเสิร์ฟ\": \"เสร็จสิ้น\"\r\n+    };\r\n+\r\n+    // API: Update order status (ทำการส่ง newStatus เข้ามาในฟังก์ชันแล้วอัปเดทไปที่ orders ที่มี _id ตรงกับ selectedOrder._id)\r\n+    const updateOrderStatus = (newStatus) => {\r\n+        axios.put(`http://localhost:5000/api/orders/${selectedOrder._id}`, { orderStatus: newStatus })\r\n+            .then(() => {\r\n+                updateOrder(selectedOrder._id, newStatus);\r\n+                Swal.fire({\r\n+                    title: \"สำเร็จ!\",\r\n+                    text: `ทำการเปลี่ยนสถานะเป็น \"${newStatus}\" แล้ว`,\r\n+                    icon: \"success\",\r\n+                    confirmButtonColor: \"#64A2FF\",\r\n+                    confirmButtonText: \"โอเค\"\r\n+                });\r\n+            })\r\n+            .catch(err => console.error('Error updating order status:', err));\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Grid container sx={{ borderBottom: \"2px solid #ddd\", paddingBottom: \"8px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n+                <Grid item>\r\n+                    <p style={{ fontSize: 26, fontWeight: 500, margin: 0 }}>ออเดอร์ที่ {selectedOrder.orderNumber}</p>\r\n+                </Grid>\r\n+                <CloseIcon style={{ fontSize: 18, color: \"#ff4b4b\", cursor: \"pointer\", position: \"absolute\", right: 0 }} onClick={onClose} />\r\n+            </Grid>\r\n+\r\n+            <Grid container spacing={0.5} style={{ marginTop: \"10px\" }} paddingBottom=\"8px\" marginBottom=\"8px\" borderBottom=\"1px solid #ddd\">\r\n+                <Grid item xs={12}>\r\n+                    <p style={{ fontSize: 18, fontWeight: 500 }}>รายละเอียดออเดอร์:</p>\r\n+                </Grid>\r\n+                <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n+                    <p>สถานะ:</p>\r\n+                    <p>{selectedOrder.orderStatus}</p>\r\n+                </Grid>\r\n+                <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n+                    <p>วัน/เวลา:</p>\r\n+                    <p>{selectedOrder.orderDate}</p>\r\n+                    <p>{selectedOrder.orderTime}</p>\r\n+                </Grid>\r\n+                <Grid item xs={12} style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n+                    <p>ผู้รับออเดอร์:</p>\r\n+                    <p>{selectedOrder.employeeName}</p>\r\n+                </Grid>\r\n+            </Grid>\r\n+\r\n+            <p style={{ fontSize: 18, fontWeight: 500 }}>รายการอาหารที่สั่ง</p>\r\n+\r\n+            {/* ฟิลเตอร์เลือกหมวดหมู่ */}\r\n+            <div className=\"filter-bubble-container\" style={{ marginTop: \"10px\", paddingBottom: \"12px\", overflowX: \"auto\", whiteSpace: \"nowrap\", marginBottom: 0 }}>\r\n+                <div style={{ display: \"inline-flex\", gap: \"8px\" }}>\r\n+                    {/* Bubble ALL */}\r\n+                    <div className={`filter-bubble ${filterCategory === \"\" ? \"active\" : \"\"}`} onClick={() => setFilterCategory(\"\")}>ALL</div>\r\n+\r\n+                    {/* Bubble Categories */}\r\n+                    {categoryList.map((category) => (\r\n+                        <div key={category.id} className={`filter-bubble ${filterCategory === category.name ? \"active\" : \"\"}`} onClick={() => setFilterCategory(category.name)}>\r\n+                            {category.name}\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+            </div>\r\n+\r\n+            {/* รายการอาหารที่ถูกกรอง */}\r\n+            <AnimatePresence mode=\"popLayout\">\r\n+                {filteredItems.map((item, index) => (\r\n+                    <motion.div\r\n+                        key={item.id}\r\n+                        initial={{ opacity: 0, y: 10 }}\r\n+                        animate={{ opacity: 1, y: 0 }}\r\n+                        exit={{ opacity: 0, y: -10 }}\r\n+                        transition={{ duration: 0.3 }}\r\n+                    >\r\n+                        <Grid sx={{ borderBottom: \"1px solid #ddd\", marginTop: \"10px\", paddingBottom: \"5px\" }}>\r\n+                            <Grid container spacing={2} >\r\n+                                {/* จำนวนสินค้า */}\r\n+                                <Grid item xs={2} sx={{ display: \"flex\", alignItems: \"flex-start\", justifyContent: \"center\" }}>\r\n+                                    <Box sx={{ backgroundColor: \"#F2F2F2\", border: \"1px solid #ddd\",  padding: \"4px 12px\", borderRadius: \"4px\", textAlign: \"center\", }}>\r\n+                                        {item.quantity}\r\n+                                    </Box>\r\n+                                </Grid>\r\n+\r\n+                                {/* ชื่อสินค้า + ตัวเลือก */}\r\n+                                <Grid item xs={7}>\r\n+                                    <Typography sx={{ fontSize: \"18px\", fontFamily: \"inherit\", fontWeight: 500, color: \"#333\", lineHeight: \"1.4\", }}>\r\n+                                        {item.name}\r\n+                                    </Typography>\r\n+\r\n+                                    <div className=\"item-size-note fs-14\" style={{ color: \"#666\" }}>\r\n+                                        {item.size}\r\n+                                        {item.selectedOptions && Object.keys(item.selectedOptions).length > 0 && (\r\n+                                            <div className=\"selected-options\">\r\n+                                                <ul>\r\n+                                                    {Object.entries(item.selectedOptions).map(([label, option]) => (\r\n+                                                        <li key={label} style={{ fontSize: \"12px\", color: \"#888\" }}>\r\n+                                                            {label}: {option}\r\n+                                                        </li>\r\n+                                                    ))}\r\n+                                                </ul>\r\n+                                            </div>\r\n+                                        )}\r\n+                                    </div>\r\n+                                </Grid>\r\n+\r\n+\r\n+                                {/* ราคาสินค้าอยู่ขวาสุด */}\r\n+                                <Grid item xs={3} sx={{ textAlign: \"right\", fontSize: \"16px\", ml: \"auto\" }}>\r\n+                                    {item.price * item.quantity} ฿\r\n+                                </Grid>\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </motion.div>\r\n+                ))}\r\n+            </AnimatePresence>\r\n+\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default OrderHistory_detail;\r\n"
                },
                {
                    "date": 1740642254072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,30 +26,9 @@\n     if (!selectedOrder) {\r\n         return <p>ไม่มีข้อมูลออเดอร์</p>;\r\n     }\r\n \r\n-    const statusMap = {\r\n-        \"ยังไม่เริ่ม\": \"กำลังทำ\",\r\n-        \"กำลังทำ\": \"พร้อมเสิร์ฟ\",\r\n-        \"พร้อมเสิร์ฟ\": \"เสร็จสิ้น\"\r\n-    };\r\n \r\n-    // API: Update order status (ทำการส่ง newStatus เข้ามาในฟังก์ชันแล้วอัปเดทไปที่ orders ที่มี _id ตรงกับ selectedOrder._id)\r\n-    const updateOrderStatus = (newStatus) => {\r\n-        axios.put(`http://localhost:5000/api/orders/${selectedOrder._id}`, { orderStatus: newStatus })\r\n-            .then(() => {\r\n-                updateOrder(selectedOrder._id, newStatus);\r\n-                Swal.fire({\r\n-                    title: \"สำเร็จ!\",\r\n-                    text: `ทำการเปลี่ยนสถานะเป็น \"${newStatus}\" แล้ว`,\r\n-                    icon: \"success\",\r\n-                    confirmButtonColor: \"#64A2FF\",\r\n-                    confirmButtonText: \"โอเค\"\r\n-                });\r\n-            })\r\n-            .catch(err => console.error('Error updating order status:', err));\r\n-    };\r\n-\r\n     return (\r\n         <>\r\n             <Grid container sx={{ borderBottom: \"2px solid #ddd\", paddingBottom: \"8px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                 <Grid item>\r\n"
                },
                {
                    "date": 1740642263426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,18 +17,16 @@\n             .then(res => { setCategoryList(res.data); })\r\n             .catch(err => console.error('Error fetching categories:', err));\r\n     }, []);\r\n \r\n-\r\n     const filteredItems = filterCategory\r\n         ? selectedOrder?.orderItems?.filter(item => item.category === filterCategory)\r\n         : selectedOrder?.orderItems || [];\r\n \r\n     if (!selectedOrder) {\r\n         return <p>ไม่มีข้อมูลออเดอร์</p>;\r\n     }\r\n \r\n-\r\n     return (\r\n         <>\r\n             <Grid container sx={{ borderBottom: \"2px solid #ddd\", paddingBottom: \"8px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                 <Grid item>\r\n"
                }
            ],
            "date": 1739695403047,
            "name": "Commit-0",
            "content": "// สำหรับหน้านี้จะเหมือนกับหน้า \"ออเดอร์ปัจจุบัน\" แต่รอแต่ง CSS ให้เรียบร้อยค่อยดึงมาก็ๆได้ แค่ Fetch data เข้ามาโชว์เฉย ๆ \r\n// No Function need, just read data\r\n\r\n"
        }
    ]
}