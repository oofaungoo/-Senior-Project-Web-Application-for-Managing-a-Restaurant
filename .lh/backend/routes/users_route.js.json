{
    "sourceFile": "backend/routes/users_route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 50,
            "patches": [
                {
                    "date": 1740811963247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740812634240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,10 +88,11 @@\n         let user;\r\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n+            const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n         } else {\r\n-            user = await User.findOne({ username, password });\r\n+            user = await User.findOne({ token,username, password,role_id });\r\n         }\r\n \r\n         // หากไม่พบ User\r\n         if (!user) {\r\n"
                },
                {
                    "date": 1740812839252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,10 +89,16 @@\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n             const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n+            user = {\r\n+                username: user.username,\r\n+                password: user.password,\r\n+                token:token,\r\n+                role_id:user.role_id\r\n+            }\r\n         } else {\r\n-            user = await User.findOne({ token,username, password,role_id });\r\n+            user = await User.findOne({ username, password,role_id });\r\n         }\r\n \r\n         // หากไม่พบ User\r\n         if (!user) {\r\n"
                },
                {
                    "date": 1740813304613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,13 +88,13 @@\n         let user;\r\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n-            const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n+            // const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n             user = {\r\n                 username: user.username,\r\n                 password: user.password,\r\n-                token:token,\r\n+                // token:token,\r\n                 role_id:user.role_id\r\n             }\r\n         } else {\r\n             user = await User.findOne({ username, password,role_id });\r\n"
                },
                {
                    "date": 1740813376443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,10 +105,9 @@\n             return res.send('Invalid username or password');\r\n         }\r\n \r\n         // ส่งข้อมูล User กลับไป (ยกเว้น password)\r\n-        const { password: _, ...userWithoutPassword } = user.toObject();\r\n-        res.status(200).json(userWithoutPassword);\r\n+        res.status(200).json(user);\r\n \r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n"
                },
                {
                    "date": 1740813406765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,14 +89,8 @@\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n             // const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n-            user = {\r\n-                username: user.username,\r\n-                password: user.password,\r\n-                // token:token,\r\n-                role_id:user.role_id\r\n-            }\r\n         } else {\r\n             user = await User.findOne({ username, password,role_id });\r\n         }\r\n \r\n@@ -104,9 +98,8 @@\n         if (!user) {\r\n             return res.send('Invalid username or password');\r\n         }\r\n \r\n-        // ส่งข้อมูล User กลับไป (ยกเว้น password)\r\n         res.status(200).json(user);\r\n \r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n"
                },
                {
                    "date": 1740813456227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,15 @@\n         let user;\r\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n-            // const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n+            const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n+            user = {\r\n+                username: user.username,\r\n+                password: user.password,\r\n+                token:token,\r\n+                role_id:user.role_id\r\n+            }\r\n         } else {\r\n             user = await User.findOne({ username, password,role_id });\r\n         }\r\n \r\n@@ -98,8 +104,9 @@\n         if (!user) {\r\n             return res.send('Invalid username or password');\r\n         }\r\n \r\n+        // ส่งข้อมูล User กลับไป (ยกเว้น password)\r\n         res.status(200).json(user);\r\n \r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n"
                },
                {
                    "date": 1740813482893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const JWT = require('jsonwebtoken');\r\n+const jwt = require('jsonwebtoken');\r\n \r\n const User = require('../models/users');\r\n \r\n router.get('/', async (req, res) => {\r\n@@ -88,9 +88,9 @@\n         let user;\r\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n-            const token = JWT.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n+            const token = jwt.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n             user = {\r\n                 username: user.username,\r\n                 password: user.password,\r\n                 token:token,\r\n"
                },
                {
                    "date": 1740814101609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const express = require('express');\r\n const router = express.Router();\r\n+const bcrypt = require('bcrypt');\r\n const jwt = require('jsonwebtoken');\r\n \r\n const User = require('../models/users');\r\n \r\n@@ -88,15 +89,9 @@\n         let user;\r\n         // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n-            const token = jwt.sign({id:user._id},process.env.JWT_SECRET,{expiresIn:\"12h\"});\r\n-            user = {\r\n-                username: user.username,\r\n-                password: user.password,\r\n-                token:token,\r\n-                role_id:user.role_id\r\n-            }\r\n+           \r\n         } else {\r\n             user = await User.findOne({ username, password,role_id });\r\n         }\r\n \r\n@@ -104,11 +99,24 @@\n         if (!user) {\r\n             return res.send('Invalid username or password');\r\n         }\r\n \r\n-        // ส่งข้อมูล User กลับไป (ยกเว้น password)\r\n-        res.status(200).json(user);\r\n+        // ตรวจสอบรหัสผ่านโดยใช้ bcrypt.compare\r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(401).json({ message: 'Invalid username or password' });\r\n+        }\r\n \r\n+        // สร้าง JWT Token\r\n+        const token = jwt.sign({ id: user._id, role: user.role_id }, process.env.JWT_SECRET, { expiresIn: \"12h\" });\r\n+\r\n+        // ส่งข้อมูลกลับ (แต่ไม่ส่ง password)\r\n+        res.status(200).json({\r\n+            username: user.username,\r\n+            role_id: user.role_id,\r\n+            token\r\n+        });\r\n+\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1740814948676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,13 +99,9 @@\n         if (!user) {\r\n             return res.send('Invalid username or password');\r\n         }\r\n \r\n-        // ตรวจสอบรหัสผ่านโดยใช้ bcrypt.compare\r\n-        const isMatch = await bcrypt.compare(password, user.password);\r\n-        if (!isMatch) {\r\n-            return res.status(401).json({ message: 'Invalid username or password' });\r\n-        }\r\n+      \r\n \r\n         // สร้าง JWT Token\r\n         const token = jwt.sign({ id: user._id, role: user.role_id }, process.env.JWT_SECRET, { expiresIn: \"12h\" });\r\n \r\n"
                },
                {
                    "date": 1740815231706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,8 @@\n         if (!user) {\r\n             return res.send('Invalid username or password');\r\n         }\r\n \r\n-      \r\n \r\n         // สร้าง JWT Token\r\n         const token = jwt.sign({ id: user._id, role: user.role_id }, process.env.JWT_SECRET, { expiresIn: \"12h\" });\r\n \r\n"
                },
                {
                    "date": 1740815277310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const bcrypt = require('bcrypt');\r\n const jwt = require('jsonwebtoken');\r\n \r\n const User = require('../models/users');\r\n \r\n"
                },
                {
                    "date": 1740815439204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,42 +78,49 @@\n // API Login\r\n router.post('/login', async (req, res) => {\r\n     try {\r\n         const { username, password } = req.body;\r\n+        console.log('🔹 Login Attempt:', { username, password }); // Log ค่าที่ได้รับ\r\n \r\n-        // ตรวจสอบว่ามีการส่งข้อมูล username และ password มาหรือไม่\r\n         if (!username || !password) {\r\n             return res.status(400).json({ message: 'Username and password are required' });\r\n         }\r\n \r\n         let user;\r\n-        // ตรวจสอบเงื่อนไข username == 'employee'\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n-           \r\n+            console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n+\r\n+            if (!user) {\r\n+                return res.status(401).json({ message: 'Invalid username or password' });\r\n+            }\r\n+\r\n+            const token = jwt.sign(\r\n+                { id: user._id, role: user.role_id },\r\n+                process.env.JWT_SECRET || 'd4f67a91e8c3b5a4f2e6d1c8b7a9e3f5',\r\n+                { expiresIn: \"12h\" }\r\n+            );\r\n+\r\n+            user = {\r\n+                username: user.username,\r\n+                role_id: user.role_id,\r\n+                token: token\r\n+            };\r\n         } else {\r\n-            user = await User.findOne({ username, password,role_id });\r\n+            user = await User.findOne({ username, password });\r\n         }\r\n \r\n-        // หากไม่พบ User\r\n         if (!user) {\r\n-            return res.send('Invalid username or password');\r\n+            return res.status(401).json({ message: 'Invalid username or password' });\r\n         }\r\n \r\n+        res.status(200).json(user);\r\n \r\n-        // สร้าง JWT Token\r\n-        const token = jwt.sign({ id: user._id, role: user.role_id }, process.env.JWT_SECRET, { expiresIn: \"12h\" });\r\n-\r\n-        // ส่งข้อมูลกลับ (แต่ไม่ส่ง password)\r\n-        res.status(200).json({\r\n-            username: user.username,\r\n-            role_id: user.role_id,\r\n-            token\r\n-        });\r\n-\r\n     } catch (error) {\r\n+        console.error('❌ Login Error:', error);\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n \r\n \r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740815540235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n             }\r\n \r\n             const token = jwt.sign(\r\n                 { id: user._id, role: user.role_id },\r\n-                process.env.JWT_SECRET || 'd4f67a91e8c3b5a4f2e6d1c8b7a9e3f5',\r\n+                process.env.JWT_SECRET || 'default_secret',\r\n                 { expiresIn: \"12h\" }\r\n             );\r\n \r\n             user = {\r\n"
                },
                {
                    "date": 1740816146753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,24 @@\n const jwt = require('jsonwebtoken');\r\n \r\n const User = require('../models/users');\r\n \r\n-router.get('/', async (req, res) => {\r\n+// **Middleware ตรวจสอบ Token**\r\n+const verifyToken = (req, res, next) => {\r\n+    const token = req.header(\"Authorization\");\r\n+    if (!token) return res.status(401).json({ error: \"Access Denied\" });\r\n+  \r\n     try {\r\n+      const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n+      req.user = verified;\r\n+      next();\r\n+    } catch (err) {\r\n+      res.status(400).json({ error: \"Invalid Token\" });\r\n+    }\r\n+  };\r\n+  \r\n+router.get('/', verifyToken, async (req, res) => {\r\n+    try {\r\n         const users = await User.find();\r\n         res.json(users);\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n"
                },
                {
                    "date": 1740816200962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n   };\r\n   \r\n-router.get('/', verifyToken, async (req, res) => {\r\n+router.get('/', async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         res.json(users);\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1740816330583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n   };\r\n   \r\n-router.get('/', async (req, res) => {\r\n+router.get('/', verifyToken, async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         res.json(users);\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1740816374664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n   };\r\n   \r\n-router.get('/', verifyToken, async (req, res) => {\r\n+router.get('/', async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         res.json(users);\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1740816494601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const express = require('express');\r\n const router = express.Router();\r\n const jwt = require('jsonwebtoken');\r\n-\r\n+const bcrypt = require(\"bcryptjs\");\r\n const User = require('../models/users');\r\n \r\n // **Middleware ตรวจสอบ Token**\r\n const verifyToken = (req, res, next) => {\r\n@@ -98,8 +98,13 @@\n         if (!username || !password) {\r\n             return res.status(400).json({ message: 'Username and password are required' });\r\n         }\r\n \r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n+        }\r\n+        \r\n         let user;\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n             console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n"
                },
                {
                    "date": 1740816602928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,13 +98,13 @@\n         if (!username || !password) {\r\n             return res.status(400).json({ message: 'Username and password are required' });\r\n         }\r\n \r\n-        const isMatch = await bcrypt.compare(password, user.password);\r\n-        if (!isMatch) {\r\n-            return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n-        }\r\n-        \r\n+        // const isMatch = await bcrypt.compare(password, user.password);\r\n+        // if (!isMatch) {\r\n+        //     return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n+        // }\r\n+\r\n         let user;\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n             console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n@@ -138,8 +138,21 @@\n         console.error('❌ Login Error:', error);\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n+// **สมัครสมาชิก**\r\n+app.post(\"/register\", async (req, res) => {\r\n+  const { username, password } = req.body;\r\n+  const hashedPassword = await bcrypt.hash(password, 10);\r\n+  const newUser = new User({ username, password: hashedPassword });\r\n \r\n+  try {\r\n+    await newUser.save();\r\n+    res.json({ message: \"User registered successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ error: err.message });\r\n+  }\r\n+});\r\n \r\n \r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740816624051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n   };\r\n   \r\n-router.get('/', async (req, res) => {\r\n+router.get('/',verifyToken, async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         res.json(users);\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1740816648128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const jwt = require('jsonwebtoken');\r\n+const bcrypt = require(\"bcryptjs\");\r\n+const User = require('../models/users');\r\n+\r\n+// **Middleware ตรวจสอบ Token**\r\n+const verifyToken = (req, res, next) => {\r\n+    const token = req.header(\"Authorization\");\r\n+    if (!token) return res.status(401).json({ error: \"Access Denied\" });\r\n+  \r\n+    try {\r\n+      const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n+      req.user = verified;\r\n+      next();\r\n+    } catch (err) {\r\n+      res.status(400).json({ error: \"Invalid Token\" });\r\n+    }\r\n+  };\r\n+  \r\n+router.get('/',verifyToken, async (req, res) => {\r\n+    try {\r\n+        const users = await User.find();\r\n+        res.json(users);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+router.get('/:id',verifyToken, async (req, res) => {\r\n+    res.json(res.user);\r\n+});\r\n+\r\n+router.post('/', async (req, res) => {\r\n+    const user = new User({\r\n+        username: req.body.username,\r\n+        name: req.body.name,\r\n+        password: req.body.password,\r\n+        phone_number: req.body.phone_number,\r\n+        role_id: req.body.role_id,\r\n+    });\r\n+\r\n+    try {\r\n+        const newUser = await user.save();\r\n+        res.status(201).json(newUser);\r\n+    } catch (error) {\r\n+        res.status(400).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+router.put('/:id', async (req, res) => {\r\n+    try {\r\n+        const id = req.params.id;\r\n+\r\n+        const user = await User.findById(id);  // Retrieve the user by ID\r\n+        \r\n+        if (!user) return res.status(404).json({ message: 'User not found' });\r\n+\r\n+        if (req.body.name != null) {\r\n+            user.name = req.body.name;\r\n+        }\r\n+        if (req.body.phone_number != null) {\r\n+            user.phone_number = req.body.phone_number;\r\n+        }\r\n+        if (req.body.role_id != null) {\r\n+            user.role_id = req.body.role_id;\r\n+        }\r\n+        if (req.body.password != null) {\r\n+            user.password = req.body.password;\r\n+        }\r\n+        if (req.body.username != null) {\r\n+            user.username = req.body.username;\r\n+        }\r\n+\r\n+        const updatedUser = await user.save(); \r\n+        \r\n+        res.json(updatedUser); \r\n+    } catch (error) {\r\n+        res.status(400).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+router.delete('/:id', async (req, res) => {\r\n+    try {\r\n+        await User.findByIdAndDelete(req.params.id) \r\n+        res.json({ message: 'Deleted User' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+// API Login\r\n+router.post('/login', async (req, res) => {\r\n+    try {\r\n+        const { username, password } = req.body;\r\n+        console.log('🔹 Login Attempt:', { username, password }); // Log ค่าที่ได้รับ\r\n+\r\n+        if (!username || !password) {\r\n+            return res.status(400).json({ message: 'Username and password are required' });\r\n+        }\r\n+\r\n+        // const isMatch = await bcrypt.compare(password, user.password);\r\n+        // if (!isMatch) {\r\n+        //     return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n+        // }\r\n+\r\n+        let user;\r\n+        if (username === 'employee') {\r\n+            user = await User.findOne({ password });\r\n+            console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n+\r\n+            if (!user) {\r\n+                return res.status(401).json({ message: 'Invalid username or password' });\r\n+            }\r\n+\r\n+            const token = jwt.sign(\r\n+                { id: user._id, role: user.role_id },\r\n+                process.env.JWT_SECRET || 'default_secret',\r\n+                { expiresIn: \"12h\" }\r\n+            );\r\n+\r\n+            user = {\r\n+                username: user.username,\r\n+                role_id: user.role_id,\r\n+                token: token\r\n+            };\r\n+        } else {\r\n+            user = await User.findOne({ username, password });\r\n+        }\r\n+\r\n+        if (!user) {\r\n+            return res.status(401).json({ message: 'Invalid username or password' });\r\n+        }\r\n+\r\n+        res.status(200).json(user);\r\n+\r\n+    } catch (error) {\r\n+        console.error('❌ Login Error:', error);\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+});\r\n+// **สมัครสมาชิก**\r\n+app.post(\"/register\", async (req, res) => {\r\n+  const { username, password } = req.body;\r\n+  const hashedPassword = await bcrypt.hash(password, 10);\r\n+  const newUser = new User({ username, password: hashedPassword });\r\n+\r\n+  try {\r\n+    await newUser.save();\r\n+    res.json({ message: \"User registered successfully\" });\r\n+  } catch (err) {\r\n+    res.status(400).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740818606682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const router = express.Router();\r\n const jwt = require('jsonwebtoken');\r\n const bcrypt = require(\"bcryptjs\");\r\n const User = require('../models/users');\r\n+const Role = require('../models/roles');\r\n \r\n // **Middleware ตรวจสอบ Token**\r\n const verifyToken = (req, res, next) => {\r\n     const token = req.header(\"Authorization\");\r\n@@ -20,8 +21,17 @@\n   \r\n router.get('/',verifyToken, async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n+        const roles = await Role.find();\r\n+        const res = users.forEach(item =>{\r\n+            roles.forEach(acc => {\r\n+                if(item.role_id == acc._id ){\r\n+                    return {...item,role_name:acc.role_name}\r\n+                }\r\n+            })\r\n+            \r\n+        })\r\n         res.json(users);\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n@@ -154,163 +164,5 @@\n });\r\n \r\n \r\n \r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n-const jwt = require('jsonwebtoken');\r\n-const bcrypt = require(\"bcryptjs\");\r\n-const User = require('../models/users');\r\n-\r\n-// **Middleware ตรวจสอบ Token**\r\n-const verifyToken = (req, res, next) => {\r\n-    const token = req.header(\"Authorization\");\r\n-    if (!token) return res.status(401).json({ error: \"Access Denied\" });\r\n-  \r\n-    try {\r\n-      const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n-      req.user = verified;\r\n-      next();\r\n-    } catch (err) {\r\n-      res.status(400).json({ error: \"Invalid Token\" });\r\n-    }\r\n-  };\r\n-  \r\n-router.get('/',verifyToken, async (req, res) => {\r\n-    try {\r\n-        const users = await User.find();\r\n-        res.json(users);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-router.get('/:id', async (req, res) => {\r\n-    res.json(res.user);\r\n-});\r\n-\r\n-router.post('/', async (req, res) => {\r\n-    const user = new User({\r\n-        username: req.body.username,\r\n-        name: req.body.name,\r\n-        password: req.body.password,\r\n-        phone_number: req.body.phone_number,\r\n-        role_id: req.body.role_id,\r\n-    });\r\n-\r\n-    try {\r\n-        const newUser = await user.save();\r\n-        res.status(201).json(newUser);\r\n-    } catch (error) {\r\n-        res.status(400).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-router.put('/:id', async (req, res) => {\r\n-    try {\r\n-        const id = req.params.id;\r\n-\r\n-        const user = await User.findById(id);  // Retrieve the user by ID\r\n-        \r\n-        if (!user) return res.status(404).json({ message: 'User not found' });\r\n-\r\n-        if (req.body.name != null) {\r\n-            user.name = req.body.name;\r\n-        }\r\n-        if (req.body.phone_number != null) {\r\n-            user.phone_number = req.body.phone_number;\r\n-        }\r\n-        if (req.body.role_id != null) {\r\n-            user.role_id = req.body.role_id;\r\n-        }\r\n-        if (req.body.password != null) {\r\n-            user.password = req.body.password;\r\n-        }\r\n-        if (req.body.username != null) {\r\n-            user.username = req.body.username;\r\n-        }\r\n-\r\n-        const updatedUser = await user.save(); \r\n-        \r\n-        res.json(updatedUser); \r\n-    } catch (error) {\r\n-        res.status(400).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-router.delete('/:id', async (req, res) => {\r\n-    try {\r\n-        await User.findByIdAndDelete(req.params.id) \r\n-        res.json({ message: 'Deleted User' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-// API Login\r\n-router.post('/login', async (req, res) => {\r\n-    try {\r\n-        const { username, password } = req.body;\r\n-        console.log('🔹 Login Attempt:', { username, password }); // Log ค่าที่ได้รับ\r\n-\r\n-        if (!username || !password) {\r\n-            return res.status(400).json({ message: 'Username and password are required' });\r\n-        }\r\n-\r\n-        // const isMatch = await bcrypt.compare(password, user.password);\r\n-        // if (!isMatch) {\r\n-        //     return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n-        // }\r\n-\r\n-        let user;\r\n-        if (username === 'employee') {\r\n-            user = await User.findOne({ password });\r\n-            console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n-\r\n-            if (!user) {\r\n-                return res.status(401).json({ message: 'Invalid username or password' });\r\n-            }\r\n-\r\n-            const token = jwt.sign(\r\n-                { id: user._id, role: user.role_id },\r\n-                process.env.JWT_SECRET || 'default_secret',\r\n-                { expiresIn: \"12h\" }\r\n-            );\r\n-\r\n-            user = {\r\n-                username: user.username,\r\n-                role_id: user.role_id,\r\n-                token: token\r\n-            };\r\n-        } else {\r\n-            user = await User.findOne({ username, password });\r\n-        }\r\n-\r\n-        if (!user) {\r\n-            return res.status(401).json({ message: 'Invalid username or password' });\r\n-        }\r\n-\r\n-        res.status(200).json(user);\r\n-\r\n-    } catch (error) {\r\n-        console.error('❌ Login Error:', error);\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-});\r\n-// **สมัครสมาชิก**\r\n-app.post(\"/register\", async (req, res) => {\r\n-  const { username, password } = req.body;\r\n-  const hashedPassword = await bcrypt.hash(password, 10);\r\n-  const newUser = new User({ username, password: hashedPassword });\r\n-\r\n-  try {\r\n-    await newUser.save();\r\n-    res.json({ message: \"User registered successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ error: err.message });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740818626813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,20 +149,20 @@\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n // **สมัครสมาชิก**\r\n-app.post(\"/register\", async (req, res) => {\r\n-  const { username, password } = req.body;\r\n-  const hashedPassword = await bcrypt.hash(password, 10);\r\n-  const newUser = new User({ username, password: hashedPassword });\r\n+// app.post(\"/register\", async (req, res) => {\r\n+//   const { username, password } = req.body;\r\n+//   const hashedPassword = await bcrypt.hash(password, 10);\r\n+//   const newUser = new User({ username, password: hashedPassword });\r\n \r\n-  try {\r\n-    await newUser.save();\r\n-    res.json({ message: \"User registered successfully\" });\r\n-  } catch (err) {\r\n-    res.status(400).json({ error: err.message });\r\n-  }\r\n-});\r\n+//   try {\r\n+//     await newUser.save();\r\n+//     res.json({ message: \"User registered successfully\" });\r\n+//   } catch (err) {\r\n+//     res.status(400).json({ error: err.message });\r\n+//   }\r\n+// });\r\n \r\n \r\n \r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740818652774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const express = require('express');\r\n const router = express.Router();\r\n const jwt = require('jsonwebtoken');\r\n-const bcrypt = require(\"bcryptjs\");\r\n+// const bcrypt = require(\"bcryptjs\");\r\n const User = require('../models/users');\r\n const Role = require('../models/roles');\r\n \r\n // **Middleware ตรวจสอบ Token**\r\n@@ -18,9 +18,9 @@\n       res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n   };\r\n   \r\n-router.get('/',verifyToken, async (req, res) => {\r\n+router.get('/', async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         const roles = await Role.find();\r\n         const res = users.forEach(item =>{\r\n"
                },
                {
                    "date": 1740818683293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                 }\r\n             })\r\n             \r\n         })\r\n-        res.json(users);\r\n+        res.json(res);\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1740818718859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,17 +22,17 @@\n router.get('/', async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         const roles = await Role.find();\r\n-        const res = users.forEach(item =>{\r\n-            roles.forEach(acc => {\r\n-                if(item.role_id == acc._id ){\r\n-                    return {...item,role_name:acc.role_name}\r\n-                }\r\n-            })\r\n-            \r\n-        })\r\n-        res.json(res);\r\n+        const newUsers = users.map(user => {\r\n+            const role = roles.find(acc => user.role_id.toString() === acc._id.toString()); \r\n+            return { \r\n+                ...user.toObject(),  // แปลง mongoose object เป็น plain object\r\n+                role_name: role ? role.role_name : 'Unknown' \r\n+            };\r\n+        });\r\n+    \r\n+        res.json(newUsers);\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1740819930125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,37 +8,37 @@\n // **Middleware ตรวจสอบ Token**\r\n const verifyToken = (req, res, next) => {\r\n     const token = req.header(\"Authorization\");\r\n     if (!token) return res.status(401).json({ error: \"Access Denied\" });\r\n-  \r\n+\r\n     try {\r\n-      const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n-      req.user = verified;\r\n-      next();\r\n+        const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n+        req.user = verified;\r\n+        next();\r\n     } catch (err) {\r\n-      res.status(400).json({ error: \"Invalid Token\" });\r\n+        res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n-  };\r\n-  \r\n+};\r\n+\r\n router.get('/', async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         const roles = await Role.find();\r\n         const newUsers = users.map(user => {\r\n-            const role = roles.find(acc => user.role_id.toString() === acc._id.toString()); \r\n-            return { \r\n+            const role = roles.find(acc => user.role_id.toString() === acc._id.toString());\r\n+            return {\r\n                 ...user.toObject(),  // แปลง mongoose object เป็น plain object\r\n-                role_name: role ? role.role_name : 'Unknown' \r\n+                role_name: role ? role.role_name : 'Unknown'\r\n             };\r\n         });\r\n-    \r\n+\r\n         res.json(newUsers);\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n \r\n-router.get('/:id',verifyToken, async (req, res) => {\r\n+router.get('/:id', verifyToken, async (req, res) => {\r\n     res.json(res.user);\r\n });\r\n \r\n router.post('/', async (req, res) => {\r\n@@ -62,9 +62,9 @@\n     try {\r\n         const id = req.params.id;\r\n \r\n         const user = await User.findById(id);  // Retrieve the user by ID\r\n-        \r\n+\r\n         if (!user) return res.status(404).json({ message: 'User not found' });\r\n \r\n         if (req.body.name != null) {\r\n             user.name = req.body.name;\r\n@@ -81,19 +81,19 @@\n         if (req.body.username != null) {\r\n             user.username = req.body.username;\r\n         }\r\n \r\n-        const updatedUser = await user.save(); \r\n-        \r\n-        res.json(updatedUser); \r\n+        const updatedUser = await user.save();\r\n+\r\n+        res.json(updatedUser);\r\n     } catch (error) {\r\n         res.status(400).json({ message: error.message });\r\n     }\r\n });\r\n \r\n router.delete('/:id', async (req, res) => {\r\n     try {\r\n-        await User.findByIdAndDelete(req.params.id) \r\n+        await User.findByIdAndDelete(req.params.id)\r\n         res.json({ message: 'Deleted User' });\r\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n@@ -148,21 +148,20 @@\n         console.error('❌ Login Error:', error);\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n+\r\n // **สมัครสมาชิก**\r\n-// app.post(\"/register\", async (req, res) => {\r\n-//   const { username, password } = req.body;\r\n-//   const hashedPassword = await bcrypt.hash(password, 10);\r\n-//   const newUser = new User({ username, password: hashedPassword });\r\n+app.post(\"/register\", async (req, res) => {\r\n+    const { username, password } = req.body;\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const newUser = new User({ username, password: hashedPassword });\r\n \r\n-//   try {\r\n-//     await newUser.save();\r\n-//     res.json({ message: \"User registered successfully\" });\r\n-//   } catch (err) {\r\n-//     res.status(400).json({ error: err.message });\r\n-//   }\r\n-// });\r\n+    try {\r\n+        await newUser.save();\r\n+        res.json({ message: \"User registered successfully\" });\r\n+    } catch (err) {\r\n+        res.status(400).json({ error: err.message });\r\n+    }\r\n+});\r\n \r\n-\r\n-\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740819939887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const jwt = require('jsonwebtoken');\r\n+// const bcrypt = require(\"bcryptjs\");\r\n+const User = require('../models/users');\r\n+const Role = require('../models/roles');\r\n+\r\n+// **Middleware ตรวจสอบ Token**\r\n+const verifyToken = (req, res, next) => {\r\n+    const token = req.header(\"Authorization\");\r\n+    if (!token) return res.status(401).json({ error: \"Access Denied\" });\r\n+\r\n+    try {\r\n+        const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n+        req.user = verified;\r\n+        next();\r\n+    } catch (err) {\r\n+        res.status(400).json({ error: \"Invalid Token\" });\r\n+    }\r\n+};\r\n+\r\n+\r\n+// **สมัครสมาชิก**\r\n+app.post(\"/register\", async (req, res) => {\r\n+    const { username, password } = req.body;\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const newUser = new User({ username, password: hashedPassword });\r\n+\r\n+    try {\r\n+        await newUser.save();\r\n+        res.json({ message: \"User registered successfully\" });\r\n+    } catch (err) {\r\n+        res.status(400).json({ error: err.message });\r\n+    }\r\n+});\r\n+\r\n+router.get('/', async (req, res) => {\r\n+    try {\r\n+        const users = await User.find();\r\n+        const roles = await Role.find();\r\n+        const newUsers = users.map(user => {\r\n+            const role = roles.find(acc => user.role_id.toString() === acc._id.toString());\r\n+            return {\r\n+                ...user.toObject(),  // แปลง mongoose object เป็น plain object\r\n+                role_name: role ? role.role_name : 'Unknown'\r\n+            };\r\n+        });\r\n+\r\n+        res.json(newUsers);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+router.get('/:id', verifyToken, async (req, res) => {\r\n+    res.json(res.user);\r\n+});\r\n+\r\n+router.post('/', async (req, res) => {\r\n+    const user = new User({\r\n+        username: req.body.username,\r\n+        name: req.body.name,\r\n+        password: req.body.password,\r\n+        phone_number: req.body.phone_number,\r\n+        role_id: req.body.role_id,\r\n+    });\r\n+\r\n+    try {\r\n+        const newUser = await user.save();\r\n+        res.status(201).json(newUser);\r\n+    } catch (error) {\r\n+        res.status(400).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+router.put('/:id', async (req, res) => {\r\n+    try {\r\n+        const id = req.params.id;\r\n+\r\n+        const user = await User.findById(id);  // Retrieve the user by ID\r\n+\r\n+        if (!user) return res.status(404).json({ message: 'User not found' });\r\n+\r\n+        if (req.body.name != null) {\r\n+            user.name = req.body.name;\r\n+        }\r\n+        if (req.body.phone_number != null) {\r\n+            user.phone_number = req.body.phone_number;\r\n+        }\r\n+        if (req.body.role_id != null) {\r\n+            user.role_id = req.body.role_id;\r\n+        }\r\n+        if (req.body.password != null) {\r\n+            user.password = req.body.password;\r\n+        }\r\n+        if (req.body.username != null) {\r\n+            user.username = req.body.username;\r\n+        }\r\n+\r\n+        const updatedUser = await user.save();\r\n+\r\n+        res.json(updatedUser);\r\n+    } catch (error) {\r\n+        res.status(400).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+router.delete('/:id', async (req, res) => {\r\n+    try {\r\n+        await User.findByIdAndDelete(req.params.id)\r\n+        res.json({ message: 'Deleted User' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+// API Login\r\n+router.post('/login', async (req, res) => {\r\n+    try {\r\n+        const { username, password } = req.body;\r\n+        console.log('🔹 Login Attempt:', { username, password }); // Log ค่าที่ได้รับ\r\n+\r\n+        if (!username || !password) {\r\n+            return res.status(400).json({ message: 'Username and password are required' });\r\n+        }\r\n+\r\n+        // const isMatch = await bcrypt.compare(password, user.password);\r\n+        // if (!isMatch) {\r\n+        //     return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n+        // }\r\n+\r\n+        let user;\r\n+        if (username === 'employee') {\r\n+            user = await User.findOne({ password });\r\n+            console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n+\r\n+            if (!user) {\r\n+                return res.status(401).json({ message: 'Invalid username or password' });\r\n+            }\r\n+\r\n+            const token = jwt.sign(\r\n+                { id: user._id, role: user.role_id },\r\n+                process.env.JWT_SECRET || 'default_secret',\r\n+                { expiresIn: \"12h\" }\r\n+            );\r\n+\r\n+            user = {\r\n+                username: user.username,\r\n+                role_id: user.role_id,\r\n+                token: token\r\n+            };\r\n+        } else {\r\n+            user = await User.findOne({ username, password });\r\n+        }\r\n+\r\n+        if (!user) {\r\n+            return res.status(401).json({ message: 'Invalid username or password' });\r\n+        }\r\n+\r\n+        res.status(200).json(user);\r\n+\r\n+    } catch (error) {\r\n+        console.error('❌ Login Error:', error);\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+});\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740820065761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,173 +21,33 @@\n \r\n \r\n // **สมัครสมาชิก**\r\n app.post(\"/register\", async (req, res) => {\r\n-    const { username, password } = req.body;\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const newUser = new User({ username, password: hashedPassword });\r\n+    const { username, password, name, phone_number } = req.body;\r\n+    \r\n+    try {\r\n+        if (!username || !password || !name || !phone_number) {\r\n+            return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n+        }\r\n \r\n-    try {\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+        const newUser = new User({ \r\n+            username, \r\n+            password: hashedPassword, \r\n+            name, \r\n+            phone_number, \r\n+            role_id: 1\r\n+        });\r\n+\r\n         await newUser.save();\r\n         res.json({ message: \"User registered successfully\" });\r\n     } catch (err) {\r\n         res.status(400).json({ error: err.message });\r\n     }\r\n });\r\n \r\n-router.get('/', async (req, res) => {\r\n-    try {\r\n-        const users = await User.find();\r\n-        const roles = await Role.find();\r\n-        const newUsers = users.map(user => {\r\n-            const role = roles.find(acc => user.role_id.toString() === acc._id.toString());\r\n-            return {\r\n-                ...user.toObject(),  // แปลง mongoose object เป็น plain object\r\n-                role_name: role ? role.role_name : 'Unknown'\r\n-            };\r\n-        });\r\n \r\n-        res.json(newUsers);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-router.get('/:id', verifyToken, async (req, res) => {\r\n-    res.json(res.user);\r\n-});\r\n-\r\n-router.post('/', async (req, res) => {\r\n-    const user = new User({\r\n-        username: req.body.username,\r\n-        name: req.body.name,\r\n-        password: req.body.password,\r\n-        phone_number: req.body.phone_number,\r\n-        role_id: req.body.role_id,\r\n-    });\r\n-\r\n-    try {\r\n-        const newUser = await user.save();\r\n-        res.status(201).json(newUser);\r\n-    } catch (error) {\r\n-        res.status(400).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-router.put('/:id', async (req, res) => {\r\n-    try {\r\n-        const id = req.params.id;\r\n-\r\n-        const user = await User.findById(id);  // Retrieve the user by ID\r\n-\r\n-        if (!user) return res.status(404).json({ message: 'User not found' });\r\n-\r\n-        if (req.body.name != null) {\r\n-            user.name = req.body.name;\r\n-        }\r\n-        if (req.body.phone_number != null) {\r\n-            user.phone_number = req.body.phone_number;\r\n-        }\r\n-        if (req.body.role_id != null) {\r\n-            user.role_id = req.body.role_id;\r\n-        }\r\n-        if (req.body.password != null) {\r\n-            user.password = req.body.password;\r\n-        }\r\n-        if (req.body.username != null) {\r\n-            user.username = req.body.username;\r\n-        }\r\n-\r\n-        const updatedUser = await user.save();\r\n-\r\n-        res.json(updatedUser);\r\n-    } catch (error) {\r\n-        res.status(400).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-router.delete('/:id', async (req, res) => {\r\n-    try {\r\n-        await User.findByIdAndDelete(req.params.id)\r\n-        res.json({ message: 'Deleted User' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-// API Login\r\n-router.post('/login', async (req, res) => {\r\n-    try {\r\n-        const { username, password } = req.body;\r\n-        console.log('🔹 Login Attempt:', { username, password }); // Log ค่าที่ได้รับ\r\n-\r\n-        if (!username || !password) {\r\n-            return res.status(400).json({ message: 'Username and password are required' });\r\n-        }\r\n-\r\n-        // const isMatch = await bcrypt.compare(password, user.password);\r\n-        // if (!isMatch) {\r\n-        //     return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n-        // }\r\n-\r\n-        let user;\r\n-        if (username === 'employee') {\r\n-            user = await User.findOne({ password });\r\n-            console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n-\r\n-            if (!user) {\r\n-                return res.status(401).json({ message: 'Invalid username or password' });\r\n-            }\r\n-\r\n-            const token = jwt.sign(\r\n-                { id: user._id, role: user.role_id },\r\n-                process.env.JWT_SECRET || 'default_secret',\r\n-                { expiresIn: \"12h\" }\r\n-            );\r\n-\r\n-            user = {\r\n-                username: user.username,\r\n-                role_id: user.role_id,\r\n-                token: token\r\n-            };\r\n-        } else {\r\n-            user = await User.findOne({ username, password });\r\n-        }\r\n-\r\n-        if (!user) {\r\n-            return res.status(401).json({ message: 'Invalid username or password' });\r\n-        }\r\n-\r\n-        res.status(200).json(user);\r\n-\r\n-    } catch (error) {\r\n-        console.error('❌ Login Error:', error);\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-});\r\n-\r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n-const jwt = require('jsonwebtoken');\r\n-// const bcrypt = require(\"bcryptjs\");\r\n-const User = require('../models/users');\r\n-const Role = require('../models/roles');\r\n-\r\n-// **Middleware ตรวจสอบ Token**\r\n-const verifyToken = (req, res, next) => {\r\n-    const token = req.header(\"Authorization\");\r\n-    if (!token) return res.status(401).json({ error: \"Access Denied\" });\r\n-\r\n-    try {\r\n-        const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n-        req.user = verified;\r\n-        next();\r\n-    } catch (err) {\r\n-        res.status(400).json({ error: \"Invalid Token\" });\r\n-    }\r\n-};\r\n-\r\n router.get('/', async (req, res) => {\r\n     try {\r\n         const users = await User.find();\r\n         const roles = await Role.find();\r\n@@ -317,19 +177,5 @@\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n \r\n-// **สมัครสมาชิก**\r\n-app.post(\"/register\", async (req, res) => {\r\n-    const { username, password } = req.body;\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const newUser = new User({ username, password: hashedPassword });\r\n-\r\n-    try {\r\n-        await newUser.save();\r\n-        res.json({ message: \"User registered successfully\" });\r\n-    } catch (err) {\r\n-        res.status(400).json({ error: err.message });\r\n-    }\r\n-});\r\n-\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740820534829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n \r\n // **สมัครสมาชิก**\r\n-app.post(\"/register\", async (req, res) => {\r\n+router.post(\"/register\", async (req, res) => {\r\n     const { username, password, name, phone_number } = req.body;\r\n     \r\n     try {\r\n         if (!username || !password || !name || !phone_number) {\r\n"
                },
                {
                    "date": 1740820886302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n const jwt = require('jsonwebtoken');\r\n // const bcrypt = require(\"bcryptjs\");\r\n const User = require('../models/users');\r\n const Role = require('../models/roles');\r\n+const bcrypt = require('bcrypt');\r\n \r\n // **Middleware ตรวจสอบ Token**\r\n const verifyToken = (req, res, next) => {\r\n     const token = req.header(\"Authorization\");\r\n"
                },
                {
                    "date": 1740821024887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n \r\n \r\n // **สมัครสมาชิก**\r\n router.post(\"/register\", async (req, res) => {\r\n+    console.log(\"📥 รับข้อมูลจาก Frontend:\", req.body); // ตรวจสอบ request\r\n     const { username, password, name, phone_number } = req.body;\r\n     \r\n     try {\r\n         if (!username || !password || !name || !phone_number) {\r\n"
                },
                {
                    "date": 1740821228039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             username, \r\n             password: hashedPassword, \r\n             name, \r\n             phone_number, \r\n-            role_id: 1\r\n+            role_id: \"1\"\r\n         });\r\n \r\n         await newUser.save();\r\n         res.json({ message: \"User registered successfully\" });\r\n"
                },
                {
                    "date": 1740821260475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,10 @@\n         if (!username || !password || !name || !phone_number) {\r\n             return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n         }\r\n \r\n+        res.json({message: \"มาสิวะ\"})\r\n+\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         const newUser = new User({ \r\n             username, \r\n"
                },
                {
                    "date": 1740821271051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         if (!username || !password || !name || !phone_number) {\r\n             return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n         }\r\n \r\n-        res.json({message: \"มาสิวะ\"})\r\n+        res.json({message: \"มาสิวะ\"});\r\n \r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         const newUser = new User({ \r\n"
                },
                {
                    "date": 1740821515261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,23 @@\n     try {\r\n         if (!username || !password || !name || !phone_number) {\r\n             return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n         }\r\n+        // ✅ ตรวจสอบว่ามี username ซ้ำหรือไม่\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n+        }\r\n \r\n-        res.json({message: \"มาสิวะ\"});\r\n-\r\n+        // ✅ ตรวจสอบว่ารหัสผ่านซ้ำกับบัญชีอื่นหรือไม่\r\n+        const users = await User.find(); // ดึงผู้ใช้ทั้งหมดจากฐานข้อมูล\r\n+        for (const user of users) {\r\n+            const isSamePassword = await bcrypt.compare(password, user.password);\r\n+            if (isSamePassword) {\r\n+                return res.status(400).json({ error: \"รหัสผ่านนี้ถูกใช้ไปแล้ว กรุณาตั้งรหัสใหม่\" });\r\n+            }\r\n+        }\r\n+        \r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         const newUser = new User({ \r\n             username, \r\n"
                },
                {
                    "date": 1740821525599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,23 +29,22 @@\n     try {\r\n         if (!username || !password || !name || !phone_number) {\r\n             return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n         }\r\n-        // ✅ ตรวจสอบว่ามี username ซ้ำหรือไม่\r\n+\r\n         const existingUser = await User.findOne({ username });\r\n         if (existingUser) {\r\n             return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n         }\r\n \r\n-        // ✅ ตรวจสอบว่ารหัสผ่านซ้ำกับบัญชีอื่นหรือไม่\r\n-        const users = await User.find(); // ดึงผู้ใช้ทั้งหมดจากฐานข้อมูล\r\n+        const users = await User.find();\r\n         for (const user of users) {\r\n             const isSamePassword = await bcrypt.compare(password, user.password);\r\n             if (isSamePassword) {\r\n                 return res.status(400).json({ error: \"รหัสผ่านนี้ถูกใช้ไปแล้ว กรุณาตั้งรหัสใหม่\" });\r\n             }\r\n         }\r\n-        \r\n+\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         const newUser = new User({ \r\n             username, \r\n"
                },
                {
                    "date": 1740821798124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n \r\n \r\n // **สมัครสมาชิก**\r\n router.post(\"/register\", async (req, res) => {\r\n-    console.log(\"📥 รับข้อมูลจาก Frontend:\", req.body); // ตรวจสอบ request\r\n     const { username, password, name, phone_number } = req.body;\r\n     \r\n     try {\r\n         if (!username || !password || !name || !phone_number) {\r\n@@ -62,8 +61,11 @@\n });\r\n \r\n \r\n router.get('/', async (req, res) => {\r\n+\r\n+    \r\n+\r\n     try {\r\n         const users = await User.find();\r\n         const roles = await Role.find();\r\n         const newUsers = users.map(user => {\r\n"
                },
                {
                    "date": 1740821908402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,27 +23,29 @@\n \r\n // **สมัครสมาชิก**\r\n router.post(\"/register\", async (req, res) => {\r\n     const { username, password, name, phone_number } = req.body;\r\n-    \r\n-    try {\r\n-        if (!username || !password || !name || !phone_number) {\r\n-            return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n+    // ตรวจสอบว่าข้อมูลครบมั้ย\r\n+    if (!username || !password || !name || !phone_number) {\r\n+        return res.status(400).json({ error: \"กรุณากรอกข้อมูลให้ครบถ้วน\" });\r\n+    }\r\n+    // ตรวจสอบว่ามี username ไปซ้ำกับคนอื่นหรือไม่ (กรณีเป็น admin)\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+        return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n+    }\r\n+    // ตรวจสอบว่า password ไปซ้ำกับคนอื่นมั้ย\r\n+    const users = await User.find();\r\n+    for (const user of users) {\r\n+        const isSamePassword = await bcrypt.compare(password, user.password);\r\n+        if (isSamePassword) {\r\n+            return res.status(400).json({ error: \"รหัสผ่านนี้ถูกใช้ไปแล้ว กรุณาตั้งรหัสใหม่\" });\r\n         }\r\n+    }\r\n \r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n-        }\r\n+    try {\r\n+        \r\n \r\n-        const users = await User.find();\r\n-        for (const user of users) {\r\n-            const isSamePassword = await bcrypt.compare(password, user.password);\r\n-            if (isSamePassword) {\r\n-                return res.status(400).json({ error: \"รหัสผ่านนี้ถูกใช้ไปแล้ว กรุณาตั้งรหัสใหม่\" });\r\n-            }\r\n-        }\r\n-\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         const newUser = new User({ \r\n             username, \r\n"
                },
                {
                    "date": 1740821915800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,8 @@\n         }\r\n     }\r\n \r\n     try {\r\n-        \r\n-\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         const newUser = new User({ \r\n             username, \r\n"
                },
                {
                    "date": 1740821924752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,8 @@\n         res.status(400).json({ error: \"Invalid Token\" });\r\n     }\r\n };\r\n \r\n-\r\n-// **สมัครสมาชิก**\r\n router.post(\"/register\", async (req, res) => {\r\n     const { username, password, name, phone_number } = req.body;\r\n     // ตรวจสอบว่าข้อมูลครบมั้ย\r\n     if (!username || !password || !name || !phone_number) {\r\n@@ -61,11 +59,8 @@\n });\r\n \r\n \r\n router.get('/', async (req, res) => {\r\n-\r\n-    \r\n-\r\n     try {\r\n         const users = await User.find();\r\n         const roles = await Role.find();\r\n         const newUsers = users.map(user => {\r\n"
                },
                {
                    "date": 1740821941720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n             role_id: \"1\"\r\n         });\r\n \r\n         await newUser.save();\r\n-        res.json({ message: \"User registered successfully\" });\r\n+        res.json({ message: \"เพิ่มแอดมินสำเร็จ\" });\r\n     } catch (err) {\r\n         res.status(400).json({ error: err.message });\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1740822197098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,12 +148,12 @@\n         if (!username || !password) {\r\n             return res.status(400).json({ message: 'Username and password are required' });\r\n         }\r\n \r\n-        // const isMatch = await bcrypt.compare(password, user.password);\r\n-        // if (!isMatch) {\r\n-        //     return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n-        // }\r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n+        }\r\n \r\n         let user;\r\n         if (username === 'employee') {\r\n             user = await User.findOne({ password });\r\n"
                },
                {
                    "date": 1740822261314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,52 +142,45 @@\n // API Login\r\n router.post('/login', async (req, res) => {\r\n     try {\r\n         const { username, password } = req.body;\r\n-        console.log('🔹 Login Attempt:', { username, password }); // Log ค่าที่ได้รับ\r\n+        console.log('🔹 Login Attempt:', { username, password });\r\n \r\n         if (!username || !password) {\r\n             return res.status(400).json({ message: 'Username and password are required' });\r\n         }\r\n \r\n+        // 🔹 ค้นหา user ก่อน\r\n+        let user = await User.findOne({ username });\r\n+\r\n+        if (!user) {\r\n+            return res.status(401).json({ message: 'Invalid username or password' });\r\n+        }\r\n+\r\n+        // 🔹 ตรวจสอบรหัสผ่าน\r\n         const isMatch = await bcrypt.compare(password, user.password);\r\n         if (!isMatch) {\r\n             return res.status(401).json({ message: 'Invalid username or password (Wrong password)' });\r\n         }\r\n \r\n-        let user;\r\n-        if (username === 'employee') {\r\n-            user = await User.findOne({ password });\r\n-            console.log('🔹 Found User:', user); // Log User ที่หาเจอ\r\n+        // 🔹 สร้าง token\r\n+        const token = jwt.sign(\r\n+            { id: user._id, role: user.role_id },\r\n+            process.env.JWT_SECRET || 'default_secret',\r\n+            { expiresIn: \"12h\" }\r\n+        );\r\n \r\n-            if (!user) {\r\n-                return res.status(401).json({ message: 'Invalid username or password' });\r\n-            }\r\n+        // 🔹 ส่งข้อมูลกลับ\r\n+        res.status(200).json({\r\n+            username: user.username,\r\n+            role_id: user.role_id,\r\n+            token: token\r\n+        });\r\n \r\n-            const token = jwt.sign(\r\n-                { id: user._id, role: user.role_id },\r\n-                process.env.JWT_SECRET || 'default_secret',\r\n-                { expiresIn: \"12h\" }\r\n-            );\r\n-\r\n-            user = {\r\n-                username: user.username,\r\n-                role_id: user.role_id,\r\n-                token: token\r\n-            };\r\n-        } else {\r\n-            user = await User.findOne({ username, password });\r\n-        }\r\n-\r\n-        if (!user) {\r\n-            return res.status(401).json({ message: 'Invalid username or password' });\r\n-        }\r\n-\r\n-        res.status(200).json(user);\r\n-\r\n     } catch (error) {\r\n         console.error('❌ Login Error:', error);\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n \r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740826521574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         const roles = await Role.find();\r\n         const newUsers = users.map(user => {\r\n             const role = roles.find(acc => user.role_id.toString() === acc._id.toString());\r\n             return {\r\n-                ...user.toObject(),  // แปลง mongoose object เป็น plain object\r\n+                ...user.toObject(),\r\n                 role_name: role ? role.role_name : 'Unknown'\r\n             };\r\n         });\r\n \r\n"
                },
                {
                    "date": 1740826638423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         }\r\n \r\n         // 🔹 สร้าง token\r\n         const token = jwt.sign(\r\n-            { id: user._id, role: user.role_id },\r\n+            { id: user._id, name: user.name, role_id: user.role_id },\r\n             process.env.JWT_SECRET || 'default_secret',\r\n             { expiresIn: \"12h\" }\r\n         );\r\n \r\n"
                },
                {
                    "date": 1740830747597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,8 @@\n // API Login\r\n router.post('/login', async (req, res) => {\r\n     try {\r\n         const { username, password } = req.body;\r\n-        console.log('🔹 Login Attempt:', { username, password });\r\n \r\n         if (!username || !password) {\r\n             return res.status(400).json({ message: 'Username and password are required' });\r\n         }\r\n@@ -176,9 +175,8 @@\n             token: token\r\n         });\r\n \r\n     } catch (error) {\r\n-        console.error('❌ Login Error:', error);\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1740830959677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,13 +42,13 @@\n \r\n     try {\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n-        const newUser = new User({ \r\n-            username, \r\n-            password: hashedPassword, \r\n-            name, \r\n-            phone_number, \r\n+        const newUser = new User({\r\n+            username,\r\n+            password: hashedPassword,\r\n+            name,\r\n+            phone_number,\r\n             role_id: \"1\"\r\n         });\r\n \r\n         await newUser.save();\r\n@@ -81,8 +81,16 @@\n     res.json(res.user);\r\n });\r\n \r\n router.post('/', async (req, res) => {\r\n+    if (req.body.role_id = '1') {\r\n+        // ตรวจสอบว่ามี username ไปซ้ำกับคนอื่นหรือไม่ (กรณีเป็น admin)\r\n+        const existingUser = await User.findOne({ req.body.username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n+        }\r\n+    }\r\n+\r\n     const user = new User({\r\n         username: req.body.username,\r\n         name: req.body.name,\r\n         password: req.body.password,\r\n"
                },
                {
                    "date": 1740831043931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,29 +81,41 @@\n     res.json(res.user);\r\n });\r\n \r\n router.post('/', async (req, res) => {\r\n-    if (req.body.role_id = '1') {\r\n-        // ตรวจสอบว่ามี username ไปซ้ำกับคนอื่นหรือไม่ (กรณีเป็น admin)\r\n-        const existingUser = await User.findOne({ req.body.username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n+    try {\r\n+        const { username, name, password, phone_number, role_id } = req.body;\r\n+\r\n+        if (role_id === '1') {\r\n+            const existingUser = await User.findOne({ username });\r\n+            if (existingUser) {\r\n+                return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n+            }\r\n         }\r\n-    }\r\n \r\n-    const user = new User({\r\n-        username: req.body.username,\r\n-        name: req.body.name,\r\n-        password: req.body.password,\r\n-        phone_number: req.body.phone_number,\r\n-        role_id: req.body.role_id,\r\n-    });\r\n+        const users = await User.find();\r\n+        for (const user of users) {\r\n+            const isSamePassword = await bcrypt.compare(password, user.password);\r\n+            if (isSamePassword) {\r\n+                return res.status(400).json({ error: \"รหัสผ่านนี้ถูกใช้ไปแล้ว กรุณาตั้งรหัสใหม่\" });\r\n+            }\r\n+        }\r\n \r\n-    try {\r\n-        const newUser = await user.save();\r\n-        res.status(201).json(newUser);\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+        const newUser = new User({\r\n+            username,\r\n+            name,\r\n+            password: hashedPassword,\r\n+            phone_number,\r\n+            role_id,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+        res.status(201).json({ message: \"สร้างบัญชีสำเร็จ\", user: newUser });\r\n+\r\n     } catch (error) {\r\n-        res.status(400).json({ message: error.message });\r\n+        res.status(500).json({ message: \"เกิดข้อผิดพลาด\", error: error.message });\r\n     }\r\n });\r\n \r\n router.put('/:id', async (req, res) => {\r\n"
                },
                {
                    "date": 1740831251296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,35 +119,45 @@\n });\r\n \r\n router.put('/:id', async (req, res) => {\r\n     try {\r\n-        const id = req.params.id;\r\n+        const { id } = req.params;\r\n+        const { username, name, phone_number, role_id, password } = req.body;\r\n \r\n-        const user = await User.findById(id);  // Retrieve the user by ID\r\n-\r\n+        const user = await User.findById(id);\r\n         if (!user) return res.status(404).json({ message: 'User not found' });\r\n \r\n-        if (req.body.name != null) {\r\n-            user.name = req.body.name;\r\n+        // เช็คว่า username ซ้ำหรือไม่ (ถ้ามีการเปลี่ยนแปลง)\r\n+        if (username && username !== user.username) {\r\n+            const existingUser = await User.findOne({ username });\r\n+            if (existingUser) {\r\n+                return res.status(400).json({ error: \"Username นี้ถูกใช้ไปแล้ว\" });\r\n+            }\r\n+            user.username = username;\r\n         }\r\n-        if (req.body.phone_number != null) {\r\n-            user.phone_number = req.body.phone_number;\r\n+\r\n+        // เช็คว่า password ซ้ำหรือไม่ (ถ้ามีการเปลี่ยนแปลง)\r\n+        if (password) {\r\n+            const users = await User.find();\r\n+            for (const otherUser of users) {\r\n+                const isSamePassword = await bcrypt.compare(password, otherUser.password);\r\n+                if (isSamePassword) {\r\n+                    return res.status(400).json({ error: \"รหัสผ่านนี้ถูกใช้ไปแล้ว กรุณาตั้งรหัสใหม่\" });\r\n+                }\r\n+            }\r\n+            user.password = await bcrypt.hash(password, 10); // เข้ารหัส password\r\n         }\r\n-        if (req.body.role_id != null) {\r\n-            user.role_id = req.body.role_id;\r\n-        }\r\n-        if (req.body.password != null) {\r\n-            user.password = req.body.password;\r\n-        }\r\n-        if (req.body.username != null) {\r\n-            user.username = req.body.username;\r\n-        }\r\n \r\n+        // อัปเดตฟิลด์อื่น ๆ\r\n+        if (name) user.name = name;\r\n+        if (phone_number) user.phone_number = phone_number;\r\n+        if (role_id) user.role_id = role_id;\r\n+\r\n         const updatedUser = await user.save();\r\n+        res.json({ message: \"อัปเดตข้อมูลสำเร็จ\", user: updatedUser });\r\n \r\n-        res.json(updatedUser);\r\n     } catch (error) {\r\n-        res.status(400).json({ message: error.message });\r\n+        res.status(500).json({ message: \"เกิดข้อผิดพลาด\", error: error.message });\r\n     }\r\n });\r\n \r\n router.delete('/:id', async (req, res) => {\r\n"
                }
            ],
            "date": 1740811963247,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst JWT = require('jsonwebtoken');\r\n\r\nconst User = require('../models/users');\r\n\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const users = await User.find();\r\n        res.json(users);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.get('/:id', async (req, res) => {\r\n    res.json(res.user);\r\n});\r\n\r\nrouter.post('/', async (req, res) => {\r\n    const user = new User({\r\n        username: req.body.username,\r\n        name: req.body.name,\r\n        password: req.body.password,\r\n        phone_number: req.body.phone_number,\r\n        role_id: req.body.role_id,\r\n    });\r\n\r\n    try {\r\n        const newUser = await user.save();\r\n        res.status(201).json(newUser);\r\n    } catch (error) {\r\n        res.status(400).json({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.put('/:id', async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n\r\n        const user = await User.findById(id);  // Retrieve the user by ID\r\n        \r\n        if (!user) return res.status(404).json({ message: 'User not found' });\r\n\r\n        if (req.body.name != null) {\r\n            user.name = req.body.name;\r\n        }\r\n        if (req.body.phone_number != null) {\r\n            user.phone_number = req.body.phone_number;\r\n        }\r\n        if (req.body.role_id != null) {\r\n            user.role_id = req.body.role_id;\r\n        }\r\n        if (req.body.password != null) {\r\n            user.password = req.body.password;\r\n        }\r\n        if (req.body.username != null) {\r\n            user.username = req.body.username;\r\n        }\r\n\r\n        const updatedUser = await user.save(); \r\n        \r\n        res.json(updatedUser); \r\n    } catch (error) {\r\n        res.status(400).json({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.delete('/:id', async (req, res) => {\r\n    try {\r\n        await User.findByIdAndDelete(req.params.id) \r\n        res.json({ message: 'Deleted User' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\n// API Login\r\nrouter.post('/login', async (req, res) => {\r\n    try {\r\n        const { username, password } = req.body;\r\n\r\n        // ตรวจสอบว่ามีการส่งข้อมูล username และ password มาหรือไม่\r\n        if (!username || !password) {\r\n            return res.status(400).json({ message: 'Username and password are required' });\r\n        }\r\n\r\n        let user;\r\n        // ตรวจสอบเงื่อนไข username == 'employee'\r\n        if (username === 'employee') {\r\n            user = await User.findOne({ password });\r\n        } else {\r\n            user = await User.findOne({ username, password });\r\n        }\r\n\r\n        // หากไม่พบ User\r\n        if (!user) {\r\n            return res.send('Invalid username or password');\r\n        }\r\n\r\n        // ส่งข้อมูล User กลับไป (ยกเว้น password)\r\n        const { password: _, ...userWithoutPassword } = user.toObject();\r\n        res.status(200).json(userWithoutPassword);\r\n\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router;"
        }
    ]
}